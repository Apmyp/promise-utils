export declare function map<T, V>(input: T[], iteratee: (value: T, index: number) => Promise<V>): Promise<V[]>;
export declare function map<T, V>(input: T[], iteratee: (value: T) => Promise<V>): Promise<V[]>;
export declare function map<T extends Object, V>(input: T, iteratee: (value: T[keyof T], key: string) => Promise<V>): Promise<V[]>;
export declare function map<T extends Object, V>(input: T, iteratee: (value: T[keyof T]) => Promise<V>): Promise<V[]>;
export declare function mapLimit<T, V>(input: T[], limit: number, iteratee: (value: T, index: number) => Promise<V>): Promise<V[]>;
export declare function mapLimit<T, V>(input: T[], limit: number, iteratee: (value: T) => Promise<V>): Promise<V[]>;
export declare function mapLimit<T extends Object, V>(input: T, limit: number, iteratee: (value: T[keyof T], key: string) => Promise<V>): Promise<V[]>;
export declare function mapLimit<T extends Object, V>(input: T, limit: number, iteratee: (value: T[keyof T]) => Promise<V>): Promise<V[]>;
export declare function mapSeries<T, V>(input: T[], iteratee: (value: T, index: number) => Promise<V>): Promise<V[]>;
export declare function mapSeries<T, V>(input: T[], iteratee: (value: T) => Promise<V>): Promise<V[]>;
export declare function mapSeries<T extends Object, V>(input: T, iteratee: (value: T[keyof T], key: string) => Promise<V>): Promise<V[]>;
export declare function mapSeries<T extends Object, V>(input: T, iteratee: (value: T[keyof T]) => Promise<V>): Promise<V[]>;
